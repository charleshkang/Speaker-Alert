# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.89.0"

require 'mini_magick'

default_platform :ios

project_file = 'SpeakerAlert/SpeakerAlert.xcodeproj'

platform :ios do
  before_all do
    cocoapods
    # xctool # run the tests of your app
  end

  def commit_bump (project_file)
    commit_version_bump(xcodeproj: project_file, message: "Bump build number")
  end

  def bump_build (project_file)
    increment_build_number(xcodeproj: project_file)
    commit_bump(project_file)
  end

  def bump_version (project_file, type)
    increment_version_number(xcodeproj: project_file, bump_type: type)
    commit_bump(project_file)
  end

  def tag_with_version(message)
    version = get_info_plist_value(path: 'SpeakerAlert/SpeakerAlert/Info.plist', key: 'CFBundleShortVersionString')
    build = get_info_plist_value(path: 'SpeakerAlert/SpeakerAlert/Info.plist', key: 'CFBundleVersion')
    add_git_tag(
      tag: message + "-" + version + "-" + build
    )
  end

  def resize_image(img_in, img_out, size)
    image = MiniMagick::Image.open(img_in)
    image.resize size
    image.format "png"
    image.write img_out
  end

  def copy_screenshots_website()
    resize_image('screenshots/en-GB/iPhone6-002 - Timer green_framed.png', '../website/img/framed_green_header.png', '298x600')
    resize_image('screenshots/en-GB/iPhone6Plus-001 Profile list_framed.png', '../website/img/iPhone6Plus-Before starting_framed.png', '199x400')
    resize_image('screenshots/en-GB/iPhone6Plus-005 - Before starting_framed.png', '../website/img/iPhone6Plus-Profile list_framed.png', '199x400')
    resize_image('screenshots/en-GB/iPhone6Plus-Timer yellow_framed.png', '../website/img/iPhone6Plus-Timer amber_framed.png', '199x400')
    resize_image('screenshots/en-GB/iPhone6Plus-002 - Timer green_framed.png', '../website/img/iPhone6Plus-Timer green_framed.png', '199x400')
    resize_image('screenshots/en-GB/iPhone6Plus-Timer red_framed.png', '../website/img/iPhone6Plus-Timer red_framed.png', '199x400')
  end

  desc "Update website"
  lane :update_website do
    frameit
    copy_screenshots_website()
  end

  desc "Increment patch version number"
  lane :bump_patch do
    bump_version(project_file, "patch")
  end

  desc "Increment major version number"
  lane :bump_major do
    bump_version(project_file, "major")
  end

  desc "Increment minor version number"
  lane :bump_minor do
    bump_version(project_file, "minor")
  end

  desc "Runs all the tests"
  lane :test do
    snapshot
    frameit
  end

  desc "Submit a new Beta Build without Screenshots"
  lane :betafast do
    bump_build(project_file)
    sigh
    gym(scheme: "SpeakerAlert")
    pilot(skip_waiting_for_build_processing: true)
    tag_with_version("betafast")
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    bump_build(project_file)
    snapshot(clear_previous_screenshots:true)
    sigh
    gym(scheme: "SpeakerAlert") # Build your app - more options available
    pilot
    tag_with_version("beta")
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    bump_build(project_file)
    snapshot(clear_previous_screenshots:true)
  desc "** Full Markdown** Support: `code`"
    sigh
    gym(scheme: "SpeakerAlert") # Build your app - more options available
    deliver(force: true)
    tag_with_version("deliver")
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
